pesquisar sobre métodos especiais: __name__, __class__


herança múltipla - quando uma classe herda de mais de uma classe 


atributos publicos e privados em python: em python não tem atributos privados restritos. Os atributos privados são designados por __<nome-atributo>
e isso sinaliza que esse atributo não pode ser modificado ou visualizado de maneira direta. 

● Público: Pode ser acessado de fora da classe.
● Privado: Só pode ser acessado pela classe.

--> properties: ou atributos gerenciáveis. São decorator para métodos.


a propriedade pega um atributo e transforma ele em uma propriedade. 
meio que faz um método ser chamado por sintaxe de atributo.

de forma geral, propriedade nada mais é que um método para envolver uma função, modificando seu comportamento.
Especificamente, você pode definir três métodos para uma propriedade:

Um getter - para acessar o valor do atributo.
Um setter - para definir o valor do atributo.
Um deleter - para excluir o atributo de instância.

uso interessante do properties está em propriedades_ex1.py
em python se não há necessidade do atributo ser privado, não precisa usar getter e setter.
Se não, se usa o property para returnar a propriedade, muda usando setter ou exclui usando (del)

as propriedades servem basicamente para adcionar getter e setter de maneira pythonica. (vide o )

---> exemplo de uso de decorator, sem ser um property:

def decorator(funcao):
    def wrapper():
        print ("Estou antes da execução da função passada como argumento")
        funcao()
        print ("Estou depois da execução da função passada como argumento")

    return wrapper

def outra_funcao():
    print ("Sou um belo argumento!")

funcao_decorada = decorator(outra_funcao)
funcao_decorada()

---> outro exemplo:

import time

# Define nosso decorator
def calcula_duracao(funcao):
    def wrapper():
        # Calcula o tempo de execução
        tempo_inicial = time.time()
        funcao()
        tempo_final = time.time()

        # Formata a mensagem que será mostrada na tela
        print("[{funcao}] Tempo total de execução: {tempo_total}".format(
            funcao=funcao.__name__.upper(),
            tempo_total=str(tempo_final - tempo_inicial))
        )

    return wrapper

# Decora a função com o decorator
@calcula_duracao
def main():
    for n in range(0, 10000000):
        pass

# Executa a função main
main()

--> polimorfismo:

em programação polimorfismo significa ter o mesmo nome de função mas com características difrentes. 
isso é útil ao utilizar o polimorfismo com herença em que a classe filha herda os métodos da classe pai, no entanto sendo possível modificar
os métodos da classe filha e mantendo o mesmo nome. É particullarmente útil quando o método herdado da classe pai não se encaixa perfeitamente 
na classe filha.
